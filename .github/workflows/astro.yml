# Sample workflow for building and deploying an Astro site to GitHub Pages
#
# To get started with Astro see: https://docs.astro.build/en/getting-started/
#
name: Deploy Astro site to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
    tags:
      - "*"
  pull_request:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BUILD_PATH: "." # default value when not using subfolders
  # BUILD_PATH: subfolder

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/pnpm-lock.yaml" ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=pnpx" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            echo "lockfile=yarn.lock" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            echo "lockfile=package-lock.json" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "23"
          cache: ${{ steps.detect-package-manager.outputs.manager }}
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: |
            ./node_modules/.astro
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml') }}-${{ hashFiles('**.[jt]s', '**.[jt]sx') }}
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        working-directory: ${{ env.BUILD_PATH }}

      - name: Setup environment variables
        run: |
          echo "PUBLIC_DOMAIN=${{ vars.PUBLIC_DOMAIN }}" >> .env.production
          echo "PUBLIC_BASE_PATH=${{ vars.PUBLIC_BASE_PATH }}" >> .env.production
          echo "PUBLIC_TIME=${{ vars.PUBLIC_TIME }}" >> .env.production

      - name: Generate Markmap
        run: |
          ${{ steps.detect-package-manager.outputs.manager }} run gen-markmap

      - name: Build with Astro
        run: |
          ${{ steps.detect-package-manager.outputs.manager }} run astro build \
            --site "${{ steps.pages.outputs.origin }}" \
            --base "${{ steps.pages.outputs.base_path }}"
        working-directory: ${{ env.BUILD_PATH }}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}/dist

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
      - name: Install dependencies
        run: npm install -g pnpm && pnpm install

      - uses: actions/cache@v4
        id: playwright-cache
        with:
          path: |
            ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/package-lock.json') }}

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps chromium
        if: steps.playwright-cache.outputs.cache-hit != 'true'

      - name: Run Playwright tests
        run: pnpm exec playwright test
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30
      - uses: actions/upload-artifact@v4
        if: ${{ !cancelled() }}
        with:
          name: playwright-result
          path: playwright-result/
          retention-days: 30

  release:
    needs: [build, test]
    runs-on: ubuntu-latest
    name: Release
    # if: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v4
        name: Install pnpm
        with:
          run_install: false

      - name: Setup java (used by git-changelog-command-line )
        uses: actions/setup-java@v2
        with:
          distribution: 'zulu'
          java-version: 17
      - name: Get release context
        run: |
          echo "NEXT_VERSION=$(pnpm run --silent get-next-version)" >> $GITHUB_ENV

      - name: Bump version in code and bump tag
        run: |
          npm run release

      - uses: actions/download-artifact@v4
        with:
          name: github-pages
      - name: Display structure of downloaded files
        run: ls -R
      - name: Extract downloaded artifact and compress extracted files
        run: |
          mkdir dist
          tar xf artifact.tar --directory=dist
          tar czf github-pages.tar.gz --directory=dist .
      - uses: actions/download-artifact@v4
        with:
          name: playwright-result

      - name: Get context
        run: |
          echo "DATE_AND_TIME=$(date +%Y.%m.%d-%H.%M)" >> $GITHUB_ENV
          echo "DATE=$(date +%Y.%m.%d)" >> $GITHUB_ENV
          SHA=${{ github.sha }}
          echo "SHA=${SHA:0:7}" >> $GITHUB_ENV

      - name: Release artifact
        uses: softprops/action-gh-release@v2
        with:
          name: "${{ startsWith(github.ref, 'refs/tags/') && github.ref_name || env.NEXT_VERSION }} â€” ${{ env.DATE }}"
          files: |
            github-pages.tar.gz
            *.pdf

      # Copy CV to astro build output
      - name: Upload artifact with PDF
        run: |
          cp *.pdf dist/

      # Reupload github-pages
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}/dist
          name: github-pages-with-cv

  # Continuous Deployment: Any changes to main branch will be deploy
  # deploy:
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   needs: release
  #   if: github.ref == 'refs/heads/main'
  #   runs-on: ubuntu-latest
  #   name: Deploy
  #   steps:
  #     - name: Deploy to GitHub Pages
  #       id: deployment
  #       uses: actions/deploy-pages@v4
  #       with:
  #         artifact_name: github-pages-with-cv
